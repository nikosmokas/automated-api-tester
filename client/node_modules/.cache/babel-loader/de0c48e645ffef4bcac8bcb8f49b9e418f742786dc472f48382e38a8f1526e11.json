{"ast":null,"code":"var _jsxFileName = \"E:\\\\Desktop\\\\Java\\\\Automated API Tester\\\\automated-api-tester\\\\client\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check localStorage for token on component mount (like app start)\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsLoggedIn(true);\n    } else {\n      setIsLoggedIn(false);\n    }\n  }, []);\n  const login = token => {\n    // Save token to localStorage\n    localStorage.setItem(\"token\", token);\n    setIsLoggedIn(true);\n  };\n  const logout = () => {\n    // Remove token from localStorage\n    localStorage.removeItem(\"token\");\n    setIsLoggedIn(false);\n  };\n  const fetchUserDetails = async token => {\n    try {\n      const response = await axios.get(\"/api/user\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUserName(response.data.name); // Assuming your API response has a 'name' field\n    } catch (error) {\n      console.error(\"Error fetching user details:\", error);\n      // Handle error (e.g., logout user if token is invalid)\n      logout();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","token","localStorage","getItem","login","setItem","logout","removeItem","fetchUserDetails","response","axios","get","headers","Authorization","setUserName","data","name","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Desktop/Java/Automated API Tester/automated-api-tester/client/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check localStorage for token on component mount (like app start)\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      setIsLoggedIn(false);\r\n    }\r\n  }, []);\r\n\r\n  const login = (token) => {\r\n    // Save token to localStorage\r\n    localStorage.setItem(\"token\", token);\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem(\"token\");\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  const fetchUserDetails = async (token) => {\r\n    try {\r\n      const response = await axios.get(\"/api/user\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setUserName(response.data.name); // Assuming your API response has a 'name' field\r\n    } catch (error) {\r\n      console.error(\"Error fetching user details:\", error);\r\n      // Handle error (e.g., logout user if token is invalid)\r\n      logout();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACLA,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAK,GAAIH,KAAK,IAAK;IACvB;IACAC,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACpCD,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChCP,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMQ,gBAAgB,GAAG,MAAOP,KAAK,IAAK;IACxC,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,WAAW,EAAE;QAC5CC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUZ,KAAK;QAChC;MACF,CAAC,CAAC;MACFa,WAAW,CAACL,QAAQ,CAACM,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD;MACAX,MAAM,CAAC,CAAC;IACV;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAErB,UAAU;MAAEK,KAAK;MAAEE;IAAO,CAAE;IAAAT,QAAA,EACxDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1B,GAAA,CA7CWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}